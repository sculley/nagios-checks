#!/usr/bin/env python

import argparse
import boto3
import sys

parser = argparse.ArgumentParser(
    description='Check the status of an AWS VPC VPN connection.'
)
parser.add_argument(
    '--aws-access-key-id',
    action='store',
    required=False,
    default=None
)
parser.add_argument(
    '--aws-secret-access-key',
    action='store',
    required=False,
    default=None
)
parser.add_argument(
    '--region',
    action='store',
    required=False,
    default='eu-west-1'
)
parser.add_argument(
    '--vpn-connection-id',
    action='append',
    dest='vpn_connection_ids',
    required=True
)

args = parser.parse_args()

session = boto3.Session(region_name=args.region)
client = session.client(service_name='ec2')
vpn_connections = client.describe_vpn_connections(
    VpnConnectionIds=args.vpn_connection_ids
)

tunnels_up = []
tags = []

for vpn in vpn_connections['VpnConnections']:
    tunnels_up = sum(
        [tunnel['Status'] == 'UP' for tunnel in vpn['VgwTelemetry']]
    )
    if tunnels_up == 0:
        print "vpn-tunnels;{};2;CRITICAL - {} connection is down".format(
        vpn['VpnConnectionId'],
        vpn['Tags'][0]['Value']
    )
        sys.exit(2)
    elif tunnels_up == 1:
        print "vpn-tunnels;{};1;WARNING - VPN connection {} only has {}/2 tunnels up".format(
            vpn['VpnConnectionId'],
            vpn['Tags'][0]['Value'],
            tunnels_up
        )
        sys.exit(1)
    elif tunnels_up == 2:
        print "vpn-tunnels;{};0;OK - {} connection is up with {}/2 tunnels".format(
            vpn['VpnConnectionId'],
            vpn['Tags'][0]['Value'],
            tunnels_up
        )
        sys.exit(0)
    else:
        print "vpn-tunnels;{};3;UNKNOWN - {} connection is down".format(
            vpn['VpnConnectionId'],
            vpn['Tags'][0]['Value'],
        )
        sys.exit(3)
